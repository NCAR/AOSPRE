{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"APAR Observing Simulation, Processing, and Research Environment (AOSPRE) The APAR Observing Simulation, Processing, and Research Environment (AOSPRE) is intended to create data sets that simulate results from flights of the Airborne Phased Array Radar (APAR) observing platform. AOSPRE relies on high-resolution simulations of real or idealized weather events as provided by, e.g., the Weather Research and Forecasting Model (WRF; Skamarock et. al., 2019) or the Cloud Model version 1 (CM1; Bryan and Morrison, 2012). AOSPRE takes a user-specified flight plan through such atmospheric simulations, together with radar scanning instructions (e.g., series of rotation and tilt angles), to determine which portions of the atmosphere APAR pulses might \"see\" during such a flight. Details of the thermodynamical and microphysical fields at these locations are extracted from the model output, and passed to routines from the Cloud-resolving Radar Simulator (CR-SIM; Oue et al., 2020). The CR-SIM routines compute various radar moments (reflectivity, radial velocity, etc.) from this model data, and AOSPRE writes these results in the CfRadial File Format (Dixon and Lee, 2016). Some main goals of AOSPRE include: providing researchers with realistic (though simulated) data sets as an aid to planning APAR flight strategies, scanning strategies, and analysis techniques. creating datasets useful for testing and developing APAR software processing tools. creating or updating various radar algorithms The atmospheric models used as input to AOSPRE should ideally be run at resolutions and output time frequencies that are comparable to the spatial and temporal scales of radar observations. In practice, simulations with grid spacing of 100 to 1000 m, and time output of a few seconds to a minute, are probably the resolutions at which AOSPRE is expected to be applied. APAR APAR is the Airborne Phased Array Radar, an observing platorm currently under development at NSF NCAR. Learn more about APAR at www.eol.ucar.edu/airborne-phased-array-radar-apar-0 . CR-SIM The Cloud-resolving Radar Simulator (CR-SIM) derives radar moments from high resolution atmospheric model output. Learn more about CR-SIM at you.stonybrook.edu/radar/research/radar-simulators . WRF The Weather Research and Forecasting model (WRF) is a numerical weather prediction model used extensively in weather research and real-time forecasting operations. Learn more about WRF at www.mmm.ucar.edu/models/wrf . CM1 The Cloud Model version 1 (CM1) is designed for detailed idealized simulations of weather systems at resolutions of hundreds of meters to a few kilometers. Learn more about CM1 at www2.mmm.ucar.edu/people/bryan/cm1 . CfRadial File Format The CfRadial File format is a CF-Compliant NetCDF format for radar and lidar moments in radial coordinates. Learn more about CfRadial at www.eol.ucar.edu/sites/default/files/files_live/private/CfRadialDoc.v1.4.20160801.pdf .","title":"Home"},{"location":"#apar-observing-simulation-processing-and-research-environment-aospre","text":"The APAR Observing Simulation, Processing, and Research Environment (AOSPRE) is intended to create data sets that simulate results from flights of the Airborne Phased Array Radar (APAR) observing platform. AOSPRE relies on high-resolution simulations of real or idealized weather events as provided by, e.g., the Weather Research and Forecasting Model (WRF; Skamarock et. al., 2019) or the Cloud Model version 1 (CM1; Bryan and Morrison, 2012). AOSPRE takes a user-specified flight plan through such atmospheric simulations, together with radar scanning instructions (e.g., series of rotation and tilt angles), to determine which portions of the atmosphere APAR pulses might \"see\" during such a flight. Details of the thermodynamical and microphysical fields at these locations are extracted from the model output, and passed to routines from the Cloud-resolving Radar Simulator (CR-SIM; Oue et al., 2020). The CR-SIM routines compute various radar moments (reflectivity, radial velocity, etc.) from this model data, and AOSPRE writes these results in the CfRadial File Format (Dixon and Lee, 2016). Some main goals of AOSPRE include: providing researchers with realistic (though simulated) data sets as an aid to planning APAR flight strategies, scanning strategies, and analysis techniques. creating datasets useful for testing and developing APAR software processing tools. creating or updating various radar algorithms The atmospheric models used as input to AOSPRE should ideally be run at resolutions and output time frequencies that are comparable to the spatial and temporal scales of radar observations. In practice, simulations with grid spacing of 100 to 1000 m, and time output of a few seconds to a minute, are probably the resolutions at which AOSPRE is expected to be applied.","title":"APAR Observing Simulation, Processing, and Research Environment (AOSPRE)"},{"location":"#apar","text":"","title":"APAR"},{"location":"#cr-sim","text":"","title":"CR-SIM"},{"location":"#wrf","text":"","title":"WRF"},{"location":"#cm1","text":"","title":"CM1"},{"location":"#cfradial-file-format","text":"","title":"CfRadial File Format"},{"location":"about/","text":"AOSPRE AOSPRE is developed at the National Science Foundation National Center for Atmospheric Research. ... etc.","title":"About AOSPRE"},{"location":"about/#aospre","text":"AOSPRE is developed at the National Science Foundation National Center for Atmospheric Research. ... etc.","title":"AOSPRE"},{"location":"acquiretables/","text":"Acquire the CR-SIM lookup tables AOSPRE depends on a large set of lookup tables provided with the CR-SIM software download. The tables require more than 20GB of disk space, and are not included in the AOSPRE download. The CR-SIM package can be downloaded from https://www.bnl.gov/cmas/cr-sim.php . Download the full software package. Download the CR-SIM software package The recommendation is to move to the top level AOSPRE/ directory, and download the CR-SIM package into this directory. The download file is a compressed tar file more than 12GB in size. The file will be named according to the version of CR-SIM downloaded: crsim-< version >.tar.gz . Unpack CR-SIM tar file Once downloaded untar the crsim tar file: tar -xvf crsim-< version >.tar.gz or you may choose to unpack only the tables needed for AOSPRE: tar -xvf crsim-< version >.tar.gz crsim-< version >/share/crsim/aux Either way, contents of the tar file will be unpacked into a directory named crsim-< version >/ . Once unpacked, the downloaded crsim tar file may be removed. Create a link to the CR-SIM tables The CR-SIM tables are located in directory crsim-< version >/share/crsim/aux/ . When AOSPRE runs, it assumes it will find tables under a directory called aux/ immediately above the working directory. Further examples in this documentation assume that execution of AOSPRE will occur in a working directory under the top-level AOSPRE/ directory. For this reason, it is recommended to create a soft link in this top-level directory to the aux/ tables directory: ln -s crsim< version >/share/crsim/aux . If you set up to run AOSPRE in other locations, remember to link the CR-SIM aux/ directory with a soft link aux just above your AOSPRE run directory.","title":"Acquire the CR-SIM tables"},{"location":"acquiretables/#acquire-the-cr-sim-lookup-tables","text":"AOSPRE depends on a large set of lookup tables provided with the CR-SIM software download. The tables require more than 20GB of disk space, and are not included in the AOSPRE download. The CR-SIM package can be downloaded from https://www.bnl.gov/cmas/cr-sim.php . Download the full software package.","title":"Acquire the CR-SIM lookup tables"},{"location":"acquiretables/#download-the-cr-sim-software-package","text":"The recommendation is to move to the top level AOSPRE/ directory, and download the CR-SIM package into this directory. The download file is a compressed tar file more than 12GB in size. The file will be named according to the version of CR-SIM downloaded: crsim-< version >.tar.gz .","title":"Download the CR-SIM software package"},{"location":"acquiretables/#unpack-cr-sim-tar-file","text":"Once downloaded untar the crsim tar file: tar -xvf crsim-< version >.tar.gz or you may choose to unpack only the tables needed for AOSPRE: tar -xvf crsim-< version >.tar.gz crsim-< version >/share/crsim/aux Either way, contents of the tar file will be unpacked into a directory named crsim-< version >/ . Once unpacked, the downloaded crsim tar file may be removed.","title":"Unpack CR-SIM tar file"},{"location":"acquiretables/#create-a-link-to-the-cr-sim-tables","text":"The CR-SIM tables are located in directory crsim-< version >/share/crsim/aux/ . When AOSPRE runs, it assumes it will find tables under a directory called aux/ immediately above the working directory. Further examples in this documentation assume that execution of AOSPRE will occur in a working directory under the top-level AOSPRE/ directory. For this reason, it is recommended to create a soft link in this top-level directory to the aux/ tables directory: ln -s crsim< version >/share/crsim/aux . If you set up to run AOSPRE in other locations, remember to link the CR-SIM aux/ directory with a soft link aux just above your AOSPRE run directory.","title":"Create a link to the CR-SIM tables"},{"location":"building/","text":"Build the AOSPRE executable from source Prerequisites For important considerations before trying to build AOSPRE, please see the \"Preliminaries and Prerequisites\" documentation page. Obtain AOSPRE code Clone the AOSPRE GitHub repository The source repository for AOSPRE is located on GitHub at https://github.com/NCAR/AOSPRE/ . It may be obtained by running the following command: git clone https://github.com/NCAR/AOSPRE.git (HTTP) git clone git@github.com:NCAR/AOSPRE.git (SSH) The source code exists in the directory AOSPRE/code/embed-crsim and is written in Fortran. Configuring the Build Configuring with Makefile After downloading the code via git clone as above, and insuring that required prerequisites are installed, change your working directory to the source code directory: cd AOSPRE/code/embed-crsim This directory contains the Fortran source code for AOSPRE. In addition, the file Makefile has instructions for the make utility to compile the source code. Open the Makefile with your preferred text editor. Select options most similar to your environment (by removing the leading # character and spaces), or create a new set of options for your environment following the examples already in the Makefile . The following options are used by the Makefile , and may need to be customized for your particular computing environment: FC specifies the command that invokes the Fortran compiler. Common values are gfortran (for the GCC Fortran compiler), ifort (for the Intel Fortran compiler), and nvfortran (for the NVidia Fortran compiler). For multi-processing builds, MPICH and OpenMPI provide specific wrappers to invoke the Fortran compiler ( e.g. mpif90 or mpifort ). Depending on the computing environment, full path names to these compiler commands may be required. LD specifies the comand that invokes the loader (linker) used in the final stage of building the executable, and is usually the same command used for the Fortran compiler ( FC above). FORTRAN_FREEFORM specifies the particular compiler flags needed to recognize free-form Fortran source code style. These flags are compiler dependent; examples for GCC, Intel, and Nvidia Fortran compilers are given in the default Makefile. NETCDF_INC specifies the include directory where the NetCDF Fortran module file resizes. This file is often called netcdf.mod . The full path to the directory that contains the netcdf.mod file must be provided here. If the nf-config command is available (available with a well-configured NetCDF installation), the command nf-config --fflags may provide the appropriate directory. The default Makefile assumes that the NetCDF lib and include directories are subdirectories of the same parent directory, specified by environment variable NETCDF . Particular installations of the NetCDF software may not follow that convention, so users may need to explicitly set the NetCDF include directory here. NETCDF_LIB specifies the lib directory where the NetCDF library files reside. The full path to the directory that contains the NetCDF library files must be provided here. If the nf-config command is available (available with a well-configured NetCDF installation), the command nf-config --flibs may include the appropriate directory. The default Makefile assumes that the NetCDF lib and include directories are subdirectories of the same parent directory, specified by environment variable NETCDF . Particular installations of the NetCDF software may not follow that convention, so users may need to explicitly set the NetCDF lib directory here. FFLAGS specifies additional options that may be required for the Fortran compiler. These options are often compiler-dependent. The Makefile is set up so that FFLAGS will inherit values from NETCDF_INC and FORTRAN_FREEFORM . Additional flags may include, for example, optimization flags. LDLIBS specifies options instructing the loader to load specific libraries. The Makefile is set up for LDLIBS to inherit the directory path specified in NETCDF_LIB , while explicitly referencing the netcdff library. DEBUG specifies options to include additional debugging capabilities for the executable. These options result in a substantially slower program execution, so they are usually turned off (commented out) unless needed for debugging purposes. Configuring with CMake After cloning the repo, create a build directory and cd to that directory. mkdir build cd build Call CMake with the desired options cmake [-DPARALLEL=On] [-DCMAKE_BUILD_TYPE=Debug] <source_repo> <source_repo> should point to the root of the AOSPRE source repo. -DPARALLEL=On will attempt to find and link against an implementation of MPI. -DCMAKE_BUILD_TYPE=Debug will build a debug version of the executable. This is significantly slower, but easier to debug. Other possible options besides Debug are RelWithDebInfo (optimizations on, but debug info included), MinSizeRel (smallest executable size), and Release (default, optimizations and no debug info) Several environment variables can also be set to affect how CMake configures the build. Such environment variables can either be set using shell syntax (e.g. FOO=bar cmake .. ) or with the -D option (e.g. cmake -DFOO=bar .. ). Following are some environment variables of note: FC sets the location of the Fortran compiler. Note: If this is set to mpifort or similar MPI wrapper, the -DPARALLEL=On option does still need to be set. NETCDF_ROOT is the root of the NetCDF installation. This might need to be set if your NetCDF location is in a non-standard location. MPI_HOME is the root of the MPI installation. If PARALLEL is turned on and CMake has trouble finding your installation of MPI, setting this variable should help. Building Invoke build system command to compile. make The resulting executable should be called aospre Cleaning make clean This removes all artifacts creating during the build such as object files, module files, and the executable. This may be useful if the compiler has changed, or if there were errors in a previous attempt to build the code.","title":"Build the AOSPRE executable from source"},{"location":"building/#build-the-aospre-executable-from-source","text":"","title":"Build the AOSPRE executable from source"},{"location":"building/#prerequisites","text":"For important considerations before trying to build AOSPRE, please see the \"Preliminaries and Prerequisites\" documentation page.","title":"Prerequisites"},{"location":"building/#obtain-aospre-code","text":"","title":"Obtain AOSPRE code"},{"location":"building/#clone-the-aospre-github-repository","text":"The source repository for AOSPRE is located on GitHub at https://github.com/NCAR/AOSPRE/ . It may be obtained by running the following command: git clone https://github.com/NCAR/AOSPRE.git (HTTP) git clone git@github.com:NCAR/AOSPRE.git (SSH) The source code exists in the directory AOSPRE/code/embed-crsim and is written in Fortran.","title":"Clone the AOSPRE GitHub repository"},{"location":"building/#configuring-the-build","text":"","title":"Configuring the Build"},{"location":"building/#configuring-with-makefile","text":"After downloading the code via git clone as above, and insuring that required prerequisites are installed, change your working directory to the source code directory: cd AOSPRE/code/embed-crsim This directory contains the Fortran source code for AOSPRE. In addition, the file Makefile has instructions for the make utility to compile the source code. Open the Makefile with your preferred text editor. Select options most similar to your environment (by removing the leading # character and spaces), or create a new set of options for your environment following the examples already in the Makefile . The following options are used by the Makefile , and may need to be customized for your particular computing environment: FC specifies the command that invokes the Fortran compiler. Common values are gfortran (for the GCC Fortran compiler), ifort (for the Intel Fortran compiler), and nvfortran (for the NVidia Fortran compiler). For multi-processing builds, MPICH and OpenMPI provide specific wrappers to invoke the Fortran compiler ( e.g. mpif90 or mpifort ). Depending on the computing environment, full path names to these compiler commands may be required. LD specifies the comand that invokes the loader (linker) used in the final stage of building the executable, and is usually the same command used for the Fortran compiler ( FC above). FORTRAN_FREEFORM specifies the particular compiler flags needed to recognize free-form Fortran source code style. These flags are compiler dependent; examples for GCC, Intel, and Nvidia Fortran compilers are given in the default Makefile. NETCDF_INC specifies the include directory where the NetCDF Fortran module file resizes. This file is often called netcdf.mod . The full path to the directory that contains the netcdf.mod file must be provided here. If the nf-config command is available (available with a well-configured NetCDF installation), the command nf-config --fflags may provide the appropriate directory. The default Makefile assumes that the NetCDF lib and include directories are subdirectories of the same parent directory, specified by environment variable NETCDF . Particular installations of the NetCDF software may not follow that convention, so users may need to explicitly set the NetCDF include directory here. NETCDF_LIB specifies the lib directory where the NetCDF library files reside. The full path to the directory that contains the NetCDF library files must be provided here. If the nf-config command is available (available with a well-configured NetCDF installation), the command nf-config --flibs may include the appropriate directory. The default Makefile assumes that the NetCDF lib and include directories are subdirectories of the same parent directory, specified by environment variable NETCDF . Particular installations of the NetCDF software may not follow that convention, so users may need to explicitly set the NetCDF lib directory here. FFLAGS specifies additional options that may be required for the Fortran compiler. These options are often compiler-dependent. The Makefile is set up so that FFLAGS will inherit values from NETCDF_INC and FORTRAN_FREEFORM . Additional flags may include, for example, optimization flags. LDLIBS specifies options instructing the loader to load specific libraries. The Makefile is set up for LDLIBS to inherit the directory path specified in NETCDF_LIB , while explicitly referencing the netcdff library. DEBUG specifies options to include additional debugging capabilities for the executable. These options result in a substantially slower program execution, so they are usually turned off (commented out) unless needed for debugging purposes.","title":"Configuring with Makefile"},{"location":"building/#configuring-with-cmake","text":"After cloning the repo, create a build directory and cd to that directory. mkdir build cd build Call CMake with the desired options cmake [-DPARALLEL=On] [-DCMAKE_BUILD_TYPE=Debug] <source_repo> <source_repo> should point to the root of the AOSPRE source repo. -DPARALLEL=On will attempt to find and link against an implementation of MPI. -DCMAKE_BUILD_TYPE=Debug will build a debug version of the executable. This is significantly slower, but easier to debug. Other possible options besides Debug are RelWithDebInfo (optimizations on, but debug info included), MinSizeRel (smallest executable size), and Release (default, optimizations and no debug info) Several environment variables can also be set to affect how CMake configures the build. Such environment variables can either be set using shell syntax (e.g. FOO=bar cmake .. ) or with the -D option (e.g. cmake -DFOO=bar .. ). Following are some environment variables of note: FC sets the location of the Fortran compiler. Note: If this is set to mpifort or similar MPI wrapper, the -DPARALLEL=On option does still need to be set. NETCDF_ROOT is the root of the NetCDF installation. This might need to be set if your NetCDF location is in a non-standard location. MPI_HOME is the root of the MPI installation. If PARALLEL is turned on and CMake has trouble finding your installation of MPI, setting this variable should help.","title":"Configuring with CMake"},{"location":"building/#building","text":"Invoke build system command to compile. make The resulting executable should be called aospre","title":"Building"},{"location":"building/#cleaning","text":"make clean This removes all artifacts creating during the build such as object files, module files, and the executable. This may be useful if the compiler has changed, or if there were errors in a previous attempt to build the code.","title":"Cleaning"},{"location":"namelist/","text":"Namelist file Fortran namelist to control aspects of the AOSPRE simulation. Organized in sections &options , &scanning , and &config_output , each representing a Fortran namelist record . &options seed integer array integer seeds to initialize the Fortran random number generator. The number of integers needed to initialize the random number generator is compiler-dependent. optional, defaults to system-dependent random initialization. seed = 198276, 98120419, 166, -16189763, 66389692, 1470800236 wrf_glob_pattern string pattern to find model output files, according to conventional POSIX globbing (wildcard) rules. wrf_glob_pattern = \"/data/wrf/supercell/100m/wrfout_d01_????-??-??_??:??:??\" output_filename_format_string string Fortran format string to build output file names. output_filename_format_string = '(\"supercell_\",A,\"_\",A,\".nc\")' leg_initial_time integer time (seconds past model initialization time) to start the flight. leg_initial_time = 4500 leg_time_seconds integer duration (in seconds) of the flight. leg_time_seconds = 300 flight_waypoints_x float array x-coordinates (model grid units) of the waypoints of the flight. flight_waypoints_x = 150.5, 350.0, 350.0, flight_waypoints_y float array y-coordinates (model grid units) of the waypoints of the flight. flight_waypoints_y = 150.75, 150.25, 350.0, flight_waypoints_vert float array vertical coordinates (in units of the flight_level_coordinate) of the waypoints of the flight. flight_waypoints_vert = 1500.0, 1500.0, 1500.0, flight_level_coordinate single character Vertical coordinate used for flight waypoints. Valid values are - 'Z' (height in meters) - 'P' (Pressure in hPa). flight_level_coordinate = \"Z\" air_speed float constant air speed (m/s) for the flight. air_speed = 120.0 herky_jerky logical explain this. herky_jerky = .FALSE. &scanning crsim_config string file name for CR-SIM configuration crsim_config = \"CONFIG\" scanning_table string file name for the table that defines the scanning strategy scanning_table = \"Scanning_Table_LHS\" pulse_repetition_frequency integer describe this pulse_repetition_frequency = 2000 pulses_per_pulse_set integer describe this pulses_per_pulse_set = 2 revisits_per_acquisition_time integer describe this revisits_per_acquisition_time = 7 beams_per_acquisition_time integer describe this beams_per_acquisition_time = 3 seconds_for_scan_cycle float describe this ! seconds_for_scan_cycle = 2.0 meters_between_gates float describe this meters_between_gates = 150. meters_to_center_of_first_gate float describe this meters_to_center_of_first_gate = 150. max_range_in_meters float describe this max_range_in_meters = 75000. fold_limit_lower float describe this optional ( is this used anymore or can we always determine the limits from the pulse configuration? ) fold_limit_lower = -16.905 fold_limit_upper float describe this optional ( is this used anymore or can we always determine the limits from the pulse configuration? ) fold_limit_upper = 16.905 &config_output","title":"Namelist"},{"location":"namelist/#namelist-file","text":"Fortran namelist to control aspects of the AOSPRE simulation. Organized in sections &options , &scanning , and &config_output , each representing a Fortran namelist record .","title":"Namelist file"},{"location":"namelist/#options","text":"","title":"&amp;options"},{"location":"namelist/#seed","text":"integer array integer seeds to initialize the Fortran random number generator. The number of integers needed to initialize the random number generator is compiler-dependent. optional, defaults to system-dependent random initialization. seed = 198276, 98120419, 166, -16189763, 66389692, 1470800236","title":"seed"},{"location":"namelist/#wrf_glob_pattern","text":"string pattern to find model output files, according to conventional POSIX globbing (wildcard) rules. wrf_glob_pattern = \"/data/wrf/supercell/100m/wrfout_d01_????-??-??_??:??:??\"","title":"wrf_glob_pattern"},{"location":"namelist/#output_filename_format_string","text":"string Fortran format string to build output file names. output_filename_format_string = '(\"supercell_\",A,\"_\",A,\".nc\")'","title":"output_filename_format_string"},{"location":"namelist/#leg_initial_time","text":"integer time (seconds past model initialization time) to start the flight. leg_initial_time = 4500","title":"leg_initial_time"},{"location":"namelist/#leg_time_seconds","text":"integer duration (in seconds) of the flight. leg_time_seconds = 300","title":"leg_time_seconds"},{"location":"namelist/#flight_waypoints_x","text":"float array x-coordinates (model grid units) of the waypoints of the flight. flight_waypoints_x = 150.5, 350.0, 350.0,","title":"flight_waypoints_x"},{"location":"namelist/#flight_waypoints_y","text":"float array y-coordinates (model grid units) of the waypoints of the flight. flight_waypoints_y = 150.75, 150.25, 350.0,","title":"flight_waypoints_y"},{"location":"namelist/#flight_waypoints_vert","text":"float array vertical coordinates (in units of the flight_level_coordinate) of the waypoints of the flight. flight_waypoints_vert = 1500.0, 1500.0, 1500.0,","title":"flight_waypoints_vert"},{"location":"namelist/#flight_level_coordinate","text":"single character Vertical coordinate used for flight waypoints. Valid values are - 'Z' (height in meters) - 'P' (Pressure in hPa). flight_level_coordinate = \"Z\"","title":"flight_level_coordinate"},{"location":"namelist/#air_speed","text":"float constant air speed (m/s) for the flight. air_speed = 120.0","title":"air_speed"},{"location":"namelist/#herky_jerky","text":"logical explain this. herky_jerky = .FALSE.","title":"herky_jerky"},{"location":"namelist/#scanning","text":"","title":"&amp;scanning"},{"location":"namelist/#crsim_config","text":"string file name for CR-SIM configuration crsim_config = \"CONFIG\"","title":"crsim_config"},{"location":"namelist/#scanning_table","text":"string file name for the table that defines the scanning strategy scanning_table = \"Scanning_Table_LHS\"","title":"scanning_table"},{"location":"namelist/#pulse_repetition_frequency","text":"integer describe this pulse_repetition_frequency = 2000","title":"pulse_repetition_frequency"},{"location":"namelist/#pulses_per_pulse_set","text":"integer describe this pulses_per_pulse_set = 2","title":"pulses_per_pulse_set"},{"location":"namelist/#revisits_per_acquisition_time","text":"integer describe this revisits_per_acquisition_time = 7","title":"revisits_per_acquisition_time"},{"location":"namelist/#beams_per_acquisition_time","text":"integer describe this beams_per_acquisition_time = 3","title":"beams_per_acquisition_time"},{"location":"namelist/#seconds_for_scan_cycle","text":"float describe this ! seconds_for_scan_cycle = 2.0","title":"seconds_for_scan_cycle"},{"location":"namelist/#meters_between_gates","text":"float describe this meters_between_gates = 150.","title":"meters_between_gates"},{"location":"namelist/#meters_to_center_of_first_gate","text":"float describe this meters_to_center_of_first_gate = 150.","title":"meters_to_center_of_first_gate"},{"location":"namelist/#max_range_in_meters","text":"float describe this max_range_in_meters = 75000.","title":"max_range_in_meters"},{"location":"namelist/#fold_limit_lower","text":"float describe this optional ( is this used anymore or can we always determine the limits from the pulse configuration? ) fold_limit_lower = -16.905","title":"fold_limit_lower"},{"location":"namelist/#fold_limit_upper","text":"float describe this optional ( is this used anymore or can we always determine the limits from the pulse configuration? ) fold_limit_upper = 16.905","title":"fold_limit_upper"},{"location":"namelist/#config_output","text":"","title":"&amp;config_output"},{"location":"preliminaries/","text":"Preliminaries and Prerequisites Several topics must be considered before attempting to build and run AOSPRE. Linux computing environment recommended AOSPRE has been developed and tested primarily in Linux environments. Other environments (e.g., MacOS, Docker/Singularity/Apptainer containers) may work for the knowledgeable and motivated user, but are not currently supported. Substantial desktop or laptop systems may have the resources for running relatively small, low-resolution experiments through AOSPRE. More detailed, realistic AOSPRE experiments will likely require powerful servers or supercomputer allocations. Fortran The core code for AOSPRE is Fortran, and has been tested with Fortran compilers from GCC, Intel, and NVidia. The GCC gfortran compiler is commonly available through a Linux distribution's package manager (e.g., by installing package \"gcc-gfortran\"); Intel and NVidia both have Fortran compilers freely available for academic or personal use. Other modern Fortran compilers may work as well, but have not been tested. NetCDF C and Fortran libraries: AOSPRE relies on the NetCDF C and Fortran libraries, software developed by UCAR/Unidata ( http://doi.org/10.5065/D6H70CW6 ). Many Linux distributions include NetCDF libraries as an optional package (e.g., from EPEL libraries of Centos and Alma Linux distributions). Users may also build NetCDF from source with code available from the above URL. The NetCDF Fortran library should be compiled with the same compiler as will be used to build AOSPRE. NetCDF libraries installed from a Linux software repository are most likely compiled with the GCC gfortran compiler. CR-SIM AOSPRE uses lookup tables distributed with the Cloud Resolving Model Radar Simulator (CR-SIM). See documentation page \"Acquire the CR-SIM tables\" for details on how to acquire these files. WRF or CM1 output files AOSPRE requires model output files from WRF or CM1. Best results come from high resolution (smaller than 1-km grid spacing) and high output frequency (smaller than 1 minute). This implies a large data volume (on the order of gigabytes or even terabytes) which cannot be included in this AOSPRE distribution. Very small sample model output files, enough for a radar sweep or two, are included in the test directory. Morrison microphysics used in NWP model simulations AOSPRE currently works only with model output files from WRF or CM1 simulations that have used the Morrison microphysics scheme, specifically mp_physics option 10 in the WRF namelist. Other schemes will likely be supported with later releases of AOSPRE. Optional software packages: Additionally, users may find some optional packages useful: MPICH or OpenMPI ( optional ) MPICH ( www.mpich.org ) and OpenMPI ( ww.open-mpi.org ) are implementations of the Message Passing Interface (MPI) standard. AOSPRE uses MPI in its (optional) multi-processor configuration. These software libraries are commonly available through your Linux distribution's package manager, or may be acquired through their respective web sites. ncview ( optional ) ncview is commonly used as a quick-look tool for NetCDF format files (which AOSPRE produces). It is available at https://cirrus.ucsd.edu/ncview or may be available through your Linux distribution's package manager. LROSE ( optional ) LROSE is a collection of software for working with Lidar, Radar, and Profiler datasets. AOSPRE creates files which are compatible with several utilities from the LROSE toolkit. LROSE may be found at http://lrose.net .","title":"Preliminaries and Prerequsites"},{"location":"preliminaries/#preliminaries-and-prerequisites","text":"Several topics must be considered before attempting to build and run AOSPRE.","title":"Preliminaries and Prerequisites"},{"location":"preliminaries/#linux-computing-environment-recommended","text":"AOSPRE has been developed and tested primarily in Linux environments. Other environments (e.g., MacOS, Docker/Singularity/Apptainer containers) may work for the knowledgeable and motivated user, but are not currently supported. Substantial desktop or laptop systems may have the resources for running relatively small, low-resolution experiments through AOSPRE. More detailed, realistic AOSPRE experiments will likely require powerful servers or supercomputer allocations.","title":"Linux computing environment recommended"},{"location":"preliminaries/#fortran","text":"The core code for AOSPRE is Fortran, and has been tested with Fortran compilers from GCC, Intel, and NVidia. The GCC gfortran compiler is commonly available through a Linux distribution's package manager (e.g., by installing package \"gcc-gfortran\"); Intel and NVidia both have Fortran compilers freely available for academic or personal use. Other modern Fortran compilers may work as well, but have not been tested.","title":"Fortran"},{"location":"preliminaries/#netcdf-c-and-fortran-libraries","text":"AOSPRE relies on the NetCDF C and Fortran libraries, software developed by UCAR/Unidata ( http://doi.org/10.5065/D6H70CW6 ). Many Linux distributions include NetCDF libraries as an optional package (e.g., from EPEL libraries of Centos and Alma Linux distributions). Users may also build NetCDF from source with code available from the above URL. The NetCDF Fortran library should be compiled with the same compiler as will be used to build AOSPRE. NetCDF libraries installed from a Linux software repository are most likely compiled with the GCC gfortran compiler.","title":"NetCDF C and Fortran libraries:"},{"location":"preliminaries/#cr-sim","text":"AOSPRE uses lookup tables distributed with the Cloud Resolving Model Radar Simulator (CR-SIM). See documentation page \"Acquire the CR-SIM tables\" for details on how to acquire these files.","title":"CR-SIM"},{"location":"preliminaries/#wrf-or-cm1-output-files","text":"AOSPRE requires model output files from WRF or CM1. Best results come from high resolution (smaller than 1-km grid spacing) and high output frequency (smaller than 1 minute). This implies a large data volume (on the order of gigabytes or even terabytes) which cannot be included in this AOSPRE distribution. Very small sample model output files, enough for a radar sweep or two, are included in the test directory.","title":"WRF or CM1 output files"},{"location":"preliminaries/#morrison-microphysics-used-in-nwp-model-simulations","text":"AOSPRE currently works only with model output files from WRF or CM1 simulations that have used the Morrison microphysics scheme, specifically mp_physics option 10 in the WRF namelist. Other schemes will likely be supported with later releases of AOSPRE.","title":"Morrison microphysics used in NWP model simulations"},{"location":"preliminaries/#optional-software-packages","text":"Additionally, users may find some optional packages useful:","title":"Optional software packages:"},{"location":"preliminaries/#mpich-or-openmpi-optional","text":"MPICH ( www.mpich.org ) and OpenMPI ( ww.open-mpi.org ) are implementations of the Message Passing Interface (MPI) standard. AOSPRE uses MPI in its (optional) multi-processor configuration. These software libraries are commonly available through your Linux distribution's package manager, or may be acquired through their respective web sites.","title":"MPICH or OpenMPI (optional)"},{"location":"preliminaries/#ncview-optional","text":"ncview is commonly used as a quick-look tool for NetCDF format files (which AOSPRE produces). It is available at https://cirrus.ucsd.edu/ncview or may be available through your Linux distribution's package manager.","title":"ncview (optional)"},{"location":"preliminaries/#lrose-optional","text":"LROSE is a collection of software for working with Lidar, Radar, and Profiler datasets. AOSPRE creates files which are compatible with several utilities from the LROSE toolkit. LROSE may be found at http://lrose.net .","title":"LROSE (optional)"},{"location":"processing/","text":"Processing The AOSPRE code execution has several phases, including the initial determination of model output file availability, radar volume allocation based on scan parameters provided, model file opening and reading, looping through the scan beam and gate information to fill the volume for the specified variables, and outputting the data into the common radar output format (CfRadial, Dixon and Lee 2016). This process is completed over the number of model files that exist within the time frame configured for the flight. In most cases, AOSPRE will interpolate between model output times, given that the aircraft currently used in the simulation (the NCAR C-130) has an airspeed of 120 m s -1 and can produce output about every ~2.0-2.3 s.","title":"Processing"},{"location":"processing/#processing","text":"The AOSPRE code execution has several phases, including the initial determination of model output file availability, radar volume allocation based on scan parameters provided, model file opening and reading, looping through the scan beam and gate information to fill the volume for the specified variables, and outputting the data into the common radar output format (CfRadial, Dixon and Lee 2016). This process is completed over the number of model files that exist within the time frame configured for the flight. In most cases, AOSPRE will interpolate between model output times, given that the aircraft currently used in the simulation (the NCAR C-130) has an airspeed of 120 m s -1 and can produce output about every ~2.0-2.3 s.","title":"Processing"},{"location":"references/","text":"References: Bell, M. M., Montgomery, M. T., and Emanuel, K. A., 2012: Air-sea enthalpy and momentum exchange at major hurricane wind speeds observed during CBLAST. J. Atmos. Sci. , 69 , 3197-3122. Bryan, G. H., and Morrison, H., 2012: Sensitivity of a simulated squall line to horizontal resolution and parameterization of microphysics. Mon. Wea. Rev. , 140 , 202-225. Dixon, M., and Javornik, B., 2016: Lidar Radar Open Software Environment (LROSE) Core Software. UCAR/NCAR - Earth Observing Laboratory. doi: 10.5065/60HZ-RY38. Dixon, M. J., and Lee, W.-C., 2016: NCAR/UNIDATA CfRadial data file format: Proposed CF-compliant netCDF format for moments data for RADAR and LIDAR in radial coordinates, doi: 10.5065/k0md-1642. Lee, W.-C., Dodge, P., Marks, F. D., and Hidebrand, P. H., 1994: Mapping of Airborne Doppler radar data, J. Atmospheric and Oceanic Technology , 11 , 572-578. Oue, M., Tatarevic, A., Kollias, P., Wang, D., Kwangmin, Y., and Vogelmann, A. M., 2020: The Cloud-resolving model Radar SIMulator (CR-SIM) Version 3.3: description and applications of a virtual observatory, Geosci. Model Dev. , 13 , 1975-1998, doi: 10.5194/gmd-13-1975-2020. Skamarock, W. C., J. B. Klemp, J. Dudhia, D. O. Gill, Z. Liu, J. Berner, W. Wang, J. G. Powers, M. G. Duda, D. M. Barker, and X.-Y. Huang, 2019: A Description of the Advanced Research WRF Version 4. NCAR Tech. Note NCAR/TN-556+STR, 145 pp. doi:10.5065/1dfh-6p97 Vivekanandan, J. and Loew, E., 2018: Airborne polarimetric Doppler weather radar: trade-offs between various engineering specifications, Geosci. Instrum. Method. Data Syst. , 7 , 21-37, doi:10.5194/gi-7-21-2018.","title":"References"},{"location":"references/#references","text":"Bell, M. M., Montgomery, M. T., and Emanuel, K. A., 2012: Air-sea enthalpy and momentum exchange at major hurricane wind speeds observed during CBLAST. J. Atmos. Sci. , 69 , 3197-3122. Bryan, G. H., and Morrison, H., 2012: Sensitivity of a simulated squall line to horizontal resolution and parameterization of microphysics. Mon. Wea. Rev. , 140 , 202-225. Dixon, M., and Javornik, B., 2016: Lidar Radar Open Software Environment (LROSE) Core Software. UCAR/NCAR - Earth Observing Laboratory. doi: 10.5065/60HZ-RY38. Dixon, M. J., and Lee, W.-C., 2016: NCAR/UNIDATA CfRadial data file format: Proposed CF-compliant netCDF format for moments data for RADAR and LIDAR in radial coordinates, doi: 10.5065/k0md-1642. Lee, W.-C., Dodge, P., Marks, F. D., and Hidebrand, P. H., 1994: Mapping of Airborne Doppler radar data, J. Atmospheric and Oceanic Technology , 11 , 572-578. Oue, M., Tatarevic, A., Kollias, P., Wang, D., Kwangmin, Y., and Vogelmann, A. M., 2020: The Cloud-resolving model Radar SIMulator (CR-SIM) Version 3.3: description and applications of a virtual observatory, Geosci. Model Dev. , 13 , 1975-1998, doi: 10.5194/gmd-13-1975-2020. Skamarock, W. C., J. B. Klemp, J. Dudhia, D. O. Gill, Z. Liu, J. Berner, W. Wang, J. G. Powers, M. G. Duda, D. M. Barker, and X.-Y. Huang, 2019: A Description of the Advanced Research WRF Version 4. NCAR Tech. Note NCAR/TN-556+STR, 145 pp. doi:10.5065/1dfh-6p97 Vivekanandan, J. and Loew, E., 2018: Airborne polarimetric Doppler weather radar: trade-offs between various engineering specifications, Geosci. Instrum. Method. Data Syst. , 7 , 21-37, doi:10.5194/gi-7-21-2018.","title":"References:"},{"location":"running/","text":"Configuration A number of configuration steps are required before running AOSPRE. These steps are outlined below. It may be helpful also to review the the \"Preliminaries and Prerequisites\" documentation page. Collect weather model output files It is up to the user to either produce their own model simulation output or obtain output from another source. Without it, the AOSPRE cannot run. It is recommended to use a model output grid spacing no larger than 1 km, as higher resolutions are better able to represent atmospheric features and variability at the scales needed for AOSPRE to produce realistic simulated radar scans. Make sure the model output files are in a location accessible from the AOSPRE run directory (i.e., not on a remote server). The files will be found at runtime by AOSPRE using the \"wrf_glob_pattern\" namelist option. Check to to see that the \"wrf_glob_pattern\" option will find the desired model output files. Design a flight plan The flight path through the simulation is set by namelist options \"flight_waypoints_x\", \"flight_waypoints_y\", and \"flight_waypoints_z\". The x and y coordinates are specified in by model grid point index, and the z coordinate may be specified in pressure (hPa) or height MSL (m) depending on the \"flight_level_coordinate\" namelist option. The flight path is traversed by straight line paths between successive (x,y,z) coordinates. Designing a flight plan can be one of the more difficult parts of using AOSPRE. Users may find the ncview utility useful for examining the NWP simulation files and finding gridpoint coordinates at appropriate times and locations. The \"flight_planner\" shell script (in the \"scripts\" directory) might also be useful. Once a flight plan is designed, users may want to run AOSPRE in a mode to create a few surveillance PPI scans along the flight path, and use these scans to verify that the flight plan is suitable for sampling the regions of interest in the NWP simulation, before running more extensive and compute-intensive flights and scanning strategies. Configure CR-SIM options CR-SIM options are configured in the CR-SIM configuration file. The file name for the CR-SIM configuration file is referenced in the AOSPRE \"CRSIM_Config\" namelist option. Only specific settings in the CR-SIM configuration file are used by AOSPRE. Configure AOSPRE namelist See \"Namelist\" documentation page. Configure scanning tables AOSPRE scanning tables are organized in a two-column format text file and contain information about the primary axis of rotation, sweep mode, and the information contained in each column (i.e., rotation and tilt angles). The basic scan files use Z as the primary axis of rotation with beams pointing at 240\u00b0 and 275\u00b0 relative to the aircraft fuselage. Tilt angles for the RHI scan are between -53\u00b0 and 53.5\u00b0 at intervals of 1.5\u00b0 for a total of 72 beams per rotation angle. The surveillance scan mode uses a tilt of 0\u00b0 with a full azimuthal rotation at intervals of 1.5\u00b0 for a total of 241 beams. The user can create their own scan tables as desired. Sample scanning tables include: Scanning_Table_LHS_PPI_sector_Z (for surveillance mode) Scanning_Table_LHS_Multiplexing_RHI_Zprime_ordered (for left panel RHI) Scanning_Table_RHS_Multiplexing_RHI_Zprime_ordered (for right panel RHI) The scanning table file name is referenced in the AOSPRE namelist. Program execution Usage executable namelist [ namelist [ namelist ]] MPICH usage mpirun -n executable namelist [ namelist [ namelist ]] Output CfRadial-format NetCDF files CfRadial format is described in CfRadial document.","title":"Running your own case"},{"location":"running/#configuration","text":"A number of configuration steps are required before running AOSPRE. These steps are outlined below. It may be helpful also to review the the \"Preliminaries and Prerequisites\" documentation page.","title":"Configuration"},{"location":"running/#_1","text":"","title":""},{"location":"running/#collect-weather-model-output-files","text":"It is up to the user to either produce their own model simulation output or obtain output from another source. Without it, the AOSPRE cannot run. It is recommended to use a model output grid spacing no larger than 1 km, as higher resolutions are better able to represent atmospheric features and variability at the scales needed for AOSPRE to produce realistic simulated radar scans. Make sure the model output files are in a location accessible from the AOSPRE run directory (i.e., not on a remote server). The files will be found at runtime by AOSPRE using the \"wrf_glob_pattern\" namelist option. Check to to see that the \"wrf_glob_pattern\" option will find the desired model output files.","title":"Collect weather model output files"},{"location":"running/#_2","text":"","title":""},{"location":"running/#design-a-flight-plan","text":"The flight path through the simulation is set by namelist options \"flight_waypoints_x\", \"flight_waypoints_y\", and \"flight_waypoints_z\". The x and y coordinates are specified in by model grid point index, and the z coordinate may be specified in pressure (hPa) or height MSL (m) depending on the \"flight_level_coordinate\" namelist option. The flight path is traversed by straight line paths between successive (x,y,z) coordinates. Designing a flight plan can be one of the more difficult parts of using AOSPRE. Users may find the ncview utility useful for examining the NWP simulation files and finding gridpoint coordinates at appropriate times and locations. The \"flight_planner\" shell script (in the \"scripts\" directory) might also be useful. Once a flight plan is designed, users may want to run AOSPRE in a mode to create a few surveillance PPI scans along the flight path, and use these scans to verify that the flight plan is suitable for sampling the regions of interest in the NWP simulation, before running more extensive and compute-intensive flights and scanning strategies.","title":"Design a flight plan"},{"location":"running/#_3","text":"","title":""},{"location":"running/#configure-cr-sim-options","text":"CR-SIM options are configured in the CR-SIM configuration file. The file name for the CR-SIM configuration file is referenced in the AOSPRE \"CRSIM_Config\" namelist option. Only specific settings in the CR-SIM configuration file are used by AOSPRE.","title":"Configure CR-SIM options"},{"location":"running/#_4","text":"","title":""},{"location":"running/#configure-aospre-namelist","text":"See \"Namelist\" documentation page.","title":"Configure AOSPRE namelist"},{"location":"running/#_5","text":"","title":""},{"location":"running/#configure-scanning-tables","text":"AOSPRE scanning tables are organized in a two-column format text file and contain information about the primary axis of rotation, sweep mode, and the information contained in each column (i.e., rotation and tilt angles). The basic scan files use Z as the primary axis of rotation with beams pointing at 240\u00b0 and 275\u00b0 relative to the aircraft fuselage. Tilt angles for the RHI scan are between -53\u00b0 and 53.5\u00b0 at intervals of 1.5\u00b0 for a total of 72 beams per rotation angle. The surveillance scan mode uses a tilt of 0\u00b0 with a full azimuthal rotation at intervals of 1.5\u00b0 for a total of 241 beams. The user can create their own scan tables as desired. Sample scanning tables include: Scanning_Table_LHS_PPI_sector_Z (for surveillance mode) Scanning_Table_LHS_Multiplexing_RHI_Zprime_ordered (for left panel RHI) Scanning_Table_RHS_Multiplexing_RHI_Zprime_ordered (for right panel RHI) The scanning table file name is referenced in the AOSPRE namelist.","title":"Configure scanning tables"},{"location":"running/#_6","text":"","title":""},{"location":"running/#program-execution","text":"Usage executable namelist [ namelist [ namelist ]] MPICH usage mpirun -n executable namelist [ namelist [ namelist ]]","title":"Program execution"},{"location":"running/#_7","text":"","title":""},{"location":"running/#output","text":"","title":"Output"},{"location":"running/#cfradial-format-netcdf-files","text":"CfRadial format is described in CfRadial document.","title":"CfRadial-format NetCDF files"},{"location":"scanning_table_library/","text":"Examples of scanning tables used with AOSPRE may be found in the directory \"Scanning_Table_Library\".","title":"Scanning table library"},{"location":"testcase/","text":"Test case mini-tutorial A small case has been set up for a quick and simple test run. Input files, configuration files, and namelists have all been set up for this test case. From the top-level AOSPRE directory, move to the working directory for the test case: cd test This directory will be your working directory for running the test case. Several components are required for a successful run of AOSPRE. All of these components have been prepared in a simple configuration for this test case. Do a listing of the current working directory: ls -l The various files required for a run of AOSPRE are described below. WRF-formatted model output files The principal data from which simulated radar sweep will be constructed are contained in model output files from a high-resolution weather model. In this example, the CM1 model running with 500-m grid spacing simulated an idealized supercell. For this example, three vertical slices from the full model run have been extracted at two output times. This is enough for a couple of RHI sweeps as a demonstration. These data are found in the \"wrfout\" files in this directory: wrfout_test_4650.nc wrfout_test_4660.nc The 4650 and 4660 numerals in these sample filenames indicate the number of seconds since model initialization. You can use the NetCDF utility program ncdump to examine the contents of these model output files, and the ncview graphics utility program (if available) to get a quick look at the meteorological fields in these files. Scanning tables AOSPRE relies on user-provided scanning tables to define the beams and sweeps that will be used to sample the atmospheric state as represented in the model output files. For this example, these files are: scanning_bot.txt scanning_lhs.txt scanning_rhs.txt scanning_top.txt where \"bot\", \"lhs\", \"rhs\", and \"top\" indicate the bottom panel of the APAR platform, the left-hand (port) side panel, the right-hand (starboard) side panel, and the top panel. The bulk of these scanning table files is a series of beam directions, expressed in terms of rotation and tilt angles in the \"type-Z\" coordinate system ( cf. CfRadial documentation), These particular files have been set up for this test case to produce sweeps in the plane perpendicular to the direction of flight. CR-SIM configuration table The components of CR-SIM used by AOSPRE use a configuration file to specify characteristics of the simulated radar. This configuration file is: CONFIG_crsim Details of the CR-SIM configuration may be found in the CR-SIM documentation. Note that only certain entries in this configuration setup are used by AOSPRE; the entries related to radar position, lidar, Micropulse lidar (MPL) and postprocessing are not used by AOSPRE. AOSPRE namelist files AOSPRE processing is controlled by one or more Fortran namelist files: namelist.BOT namelist.LHS namelist.RHS namelist.TOP Where the bottom, left-hand side, right-hand side, and top panels each have their own namelist files. The namelist files specify the flight path and radar scanning strategy for a flight, and the input and output files for the AOSPRE processing.. See the namelist documentation for details of the namelist entries. Several of the critical namelist entries are described below: wrf_glob_pattern The wrf_glob_pattern entry defines how AOSPRE finds the atmospheric model output files. Any file matching the glob pattern (using standard wildcard matching where '?' matches any single character and '*' matches any number of characters) will be interpreted as a model output file. In this example, the wrf_glob_pattern has been set up to match the names of both WRF output files provided for the test. output_filename_format_string The output_filename_format_string determines how the CfRadial-formatted files produced by AOSPRE will be named. This entry must specify a Fortran format string with exactly two 'A' format specifiers, used to build output file names. The 'A' format specifiers will resolve to the beginning and ending time of the sweeps in any particular output file. With each panel of the APAR platform producing its own set of output volumes, the file name construction should be unique for each panel. Compare the output_filename_format_string for each namelist in the test directory. leg_initial_time The leg_initial_time entry specifies the time (in seconds from model initialization) to start a data-collection flight leg. Since the example WRF output files contain only 10 seconds of data (model output times at 4650 to 4660 seconds past initialization), we've set up the namelists for an 8-second flight leg starting at time 4651 seconds past initialization. leg_time_seconds The leg_time_seconds entry specifies the duration in seconds of the data-collection fligh leg. As mentioned above, only a minimal set of data is provided for this small test. An 8-second flight will fit within the data provided. flight_waypoints_x, y, and z The entries flight_waypoints_x , flight_waypoints_y , and flight_waypoints_z specify the flight path taken through the model output files. The X and Y coordinates are specified in terms of grid-point indices in the model grid (x and y both equal 1 at the lower left grid point). The Z coordinate may be specified in meters above MSL, or as pressure in hPa, depending on the setting of flight_level_coordinate . The test dataset (in the wrfout files) consists of three vertical slices, in the south-north direction, from a larger model grid. The dimensions of this subset grid (X x Y) are 3 x 400. Our initial flight is set up to move from west to east at y=105, south of the main body of the storm, at 2000 meters above sea level. When running AOSPRE with for multiple APAR panels, the namelists for each panel must be set up with the same flight path and flight time information. CRSIM_Config The CRSIM_Config entry must specify the file name of the CR-SIM configuration file, in this case, \"CONFIG_crsim\". scanning_table The entry specifies the name of the file that contains the details of the radar beam directions for the panel represented by the namelist. Compare the scanning_table entries for the four namelists provided. Run the AOSPRE program The AOSPRE executable takes as command-line arguments the names of one or more namelist files. As a first run of AOSPRE, invoke a flight using the original namelist settings, with only the left-hand side panel active: ../code/embed_crsim/aospre namelist.LHS If you get an immediate segmentation fault, you may need to unlimit the stacksize in your terminal session: ulimit -s unlimited for bash shell, unlimit stacksize for csh shell, and try again. A successful run will result in several CfRadial-formatted files from the left-hand side panel of the APAR platform. E.g.: LHS_rhi_20010101_011731.092_to_20010101_011732.149.nc LHS_rhi_20010101_011732.244_to_20010101_011733.301.nc LHS_rhi_20010101_011733.396_to_20010101_011734.453.nc LHS_rhi_20010101_011734.548_to_20010101_011735.605.nc LHS_rhi_20010101_011735.700_to_20010101_011736.757.nc LHS_rhi_20010101_011736.852_to_20010101_011737.909.nc These contents of these files may be examined with the NetCDF utility program ncdump , and may be explored with the ncview utility program. Since these files are in radar coordinates, it is often difficult to make sense of the quick-look views provided by the ncview program. Other graphics capabilities that work with the radar coordinates, such as those in the LROSE package, are beyond the scope of this mini-tutorial. Note also the file flightpath.ascii . This file preserves details of the aircraft's flight through the simulation, with locations, directions, and wind values at the aircraft location, every tenth of a second. Modify the flightpath to run again To explore the multi-panel capability, edit all the namelists to move the flight_waypoints_y entries to somewhere near the middle of the supercell, at Y index about 150, where the various panels may all see interesting weather. Rerun the flight with the left panel: ../code/embed_crsim/aospre namelist.LHS And do a repeat flight with the right panel: ../code/embed_crsim/aospre namelist.RHS Note the additional RHS CfRadial files produced by this second run. You can also run multiple APAR panels in the same run, by specifying multiple namelists on as command-line arguments to the AOSPRE executable. E.g., try: ../code/embed_crsim/aospre namelist.RHS namelist.LHS or ../code/embed_crsim/aospre namelist.BOT namelist.TOP or ../code/embed_crsim/aospre namelist.BOT namelist.TOP namelist.LHS namelist.RHS and note the output generated. Further exploration As noted before, the minimal WRF output dataset allows only limited AOSPRE runs. But there are a variety of runs you can do to further explore the data or familiarize yourself with AOSPRE configuration. E.g.: Try setting up flights north of the storm. Try setting up flights from west to east. See how results change with flights at different levels. Change the direction of the flight and the corresponding orientation of the beams in the scanning tables and still get sweeps within the slices of the WRF output data.","title":"Run the test case"},{"location":"testcase/#test-case-mini-tutorial","text":"A small case has been set up for a quick and simple test run. Input files, configuration files, and namelists have all been set up for this test case. From the top-level AOSPRE directory, move to the working directory for the test case: cd test This directory will be your working directory for running the test case. Several components are required for a successful run of AOSPRE. All of these components have been prepared in a simple configuration for this test case. Do a listing of the current working directory: ls -l The various files required for a run of AOSPRE are described below.","title":"Test case mini-tutorial"},{"location":"testcase/#wrf-formatted-model-output-files","text":"The principal data from which simulated radar sweep will be constructed are contained in model output files from a high-resolution weather model. In this example, the CM1 model running with 500-m grid spacing simulated an idealized supercell. For this example, three vertical slices from the full model run have been extracted at two output times. This is enough for a couple of RHI sweeps as a demonstration. These data are found in the \"wrfout\" files in this directory: wrfout_test_4650.nc wrfout_test_4660.nc The 4650 and 4660 numerals in these sample filenames indicate the number of seconds since model initialization. You can use the NetCDF utility program ncdump to examine the contents of these model output files, and the ncview graphics utility program (if available) to get a quick look at the meteorological fields in these files.","title":"WRF-formatted model output files"},{"location":"testcase/#scanning-tables","text":"AOSPRE relies on user-provided scanning tables to define the beams and sweeps that will be used to sample the atmospheric state as represented in the model output files. For this example, these files are: scanning_bot.txt scanning_lhs.txt scanning_rhs.txt scanning_top.txt where \"bot\", \"lhs\", \"rhs\", and \"top\" indicate the bottom panel of the APAR platform, the left-hand (port) side panel, the right-hand (starboard) side panel, and the top panel. The bulk of these scanning table files is a series of beam directions, expressed in terms of rotation and tilt angles in the \"type-Z\" coordinate system ( cf. CfRadial documentation), These particular files have been set up for this test case to produce sweeps in the plane perpendicular to the direction of flight.","title":"Scanning tables"},{"location":"testcase/#cr-sim-configuration-table","text":"The components of CR-SIM used by AOSPRE use a configuration file to specify characteristics of the simulated radar. This configuration file is: CONFIG_crsim Details of the CR-SIM configuration may be found in the CR-SIM documentation. Note that only certain entries in this configuration setup are used by AOSPRE; the entries related to radar position, lidar, Micropulse lidar (MPL) and postprocessing are not used by AOSPRE.","title":"CR-SIM configuration table"},{"location":"testcase/#aospre-namelist-files","text":"AOSPRE processing is controlled by one or more Fortran namelist files: namelist.BOT namelist.LHS namelist.RHS namelist.TOP Where the bottom, left-hand side, right-hand side, and top panels each have their own namelist files. The namelist files specify the flight path and radar scanning strategy for a flight, and the input and output files for the AOSPRE processing.. See the namelist documentation for details of the namelist entries. Several of the critical namelist entries are described below:","title":"AOSPRE namelist files"},{"location":"testcase/#wrf_glob_pattern","text":"The wrf_glob_pattern entry defines how AOSPRE finds the atmospheric model output files. Any file matching the glob pattern (using standard wildcard matching where '?' matches any single character and '*' matches any number of characters) will be interpreted as a model output file. In this example, the wrf_glob_pattern has been set up to match the names of both WRF output files provided for the test.","title":"wrf_glob_pattern"},{"location":"testcase/#output_filename_format_string","text":"The output_filename_format_string determines how the CfRadial-formatted files produced by AOSPRE will be named. This entry must specify a Fortran format string with exactly two 'A' format specifiers, used to build output file names. The 'A' format specifiers will resolve to the beginning and ending time of the sweeps in any particular output file. With each panel of the APAR platform producing its own set of output volumes, the file name construction should be unique for each panel. Compare the output_filename_format_string for each namelist in the test directory.","title":"output_filename_format_string"},{"location":"testcase/#leg_initial_time","text":"The leg_initial_time entry specifies the time (in seconds from model initialization) to start a data-collection flight leg. Since the example WRF output files contain only 10 seconds of data (model output times at 4650 to 4660 seconds past initialization), we've set up the namelists for an 8-second flight leg starting at time 4651 seconds past initialization.","title":"leg_initial_time"},{"location":"testcase/#leg_time_seconds","text":"The leg_time_seconds entry specifies the duration in seconds of the data-collection fligh leg. As mentioned above, only a minimal set of data is provided for this small test. An 8-second flight will fit within the data provided.","title":"leg_time_seconds"},{"location":"testcase/#flight_waypoints_x-y-and-z","text":"The entries flight_waypoints_x , flight_waypoints_y , and flight_waypoints_z specify the flight path taken through the model output files. The X and Y coordinates are specified in terms of grid-point indices in the model grid (x and y both equal 1 at the lower left grid point). The Z coordinate may be specified in meters above MSL, or as pressure in hPa, depending on the setting of flight_level_coordinate . The test dataset (in the wrfout files) consists of three vertical slices, in the south-north direction, from a larger model grid. The dimensions of this subset grid (X x Y) are 3 x 400. Our initial flight is set up to move from west to east at y=105, south of the main body of the storm, at 2000 meters above sea level. When running AOSPRE with for multiple APAR panels, the namelists for each panel must be set up with the same flight path and flight time information.","title":"flight_waypoints_x, y, and z"},{"location":"testcase/#crsim_config","text":"The CRSIM_Config entry must specify the file name of the CR-SIM configuration file, in this case, \"CONFIG_crsim\".","title":"CRSIM_Config"},{"location":"testcase/#scanning_table","text":"The entry specifies the name of the file that contains the details of the radar beam directions for the panel represented by the namelist. Compare the scanning_table entries for the four namelists provided.","title":"scanning_table"},{"location":"testcase/#run-the-aospre-program","text":"The AOSPRE executable takes as command-line arguments the names of one or more namelist files. As a first run of AOSPRE, invoke a flight using the original namelist settings, with only the left-hand side panel active: ../code/embed_crsim/aospre namelist.LHS If you get an immediate segmentation fault, you may need to unlimit the stacksize in your terminal session: ulimit -s unlimited for bash shell, unlimit stacksize for csh shell, and try again. A successful run will result in several CfRadial-formatted files from the left-hand side panel of the APAR platform. E.g.: LHS_rhi_20010101_011731.092_to_20010101_011732.149.nc LHS_rhi_20010101_011732.244_to_20010101_011733.301.nc LHS_rhi_20010101_011733.396_to_20010101_011734.453.nc LHS_rhi_20010101_011734.548_to_20010101_011735.605.nc LHS_rhi_20010101_011735.700_to_20010101_011736.757.nc LHS_rhi_20010101_011736.852_to_20010101_011737.909.nc These contents of these files may be examined with the NetCDF utility program ncdump , and may be explored with the ncview utility program. Since these files are in radar coordinates, it is often difficult to make sense of the quick-look views provided by the ncview program. Other graphics capabilities that work with the radar coordinates, such as those in the LROSE package, are beyond the scope of this mini-tutorial. Note also the file flightpath.ascii . This file preserves details of the aircraft's flight through the simulation, with locations, directions, and wind values at the aircraft location, every tenth of a second.","title":"Run the AOSPRE program"},{"location":"testcase/#modify-the-flightpath-to-run-again","text":"To explore the multi-panel capability, edit all the namelists to move the flight_waypoints_y entries to somewhere near the middle of the supercell, at Y index about 150, where the various panels may all see interesting weather. Rerun the flight with the left panel: ../code/embed_crsim/aospre namelist.LHS And do a repeat flight with the right panel: ../code/embed_crsim/aospre namelist.RHS Note the additional RHS CfRadial files produced by this second run. You can also run multiple APAR panels in the same run, by specifying multiple namelists on as command-line arguments to the AOSPRE executable. E.g., try: ../code/embed_crsim/aospre namelist.RHS namelist.LHS or ../code/embed_crsim/aospre namelist.BOT namelist.TOP or ../code/embed_crsim/aospre namelist.BOT namelist.TOP namelist.LHS namelist.RHS and note the output generated.","title":"Modify the flightpath to run again"},{"location":"testcase/#further-exploration","text":"As noted before, the minimal WRF output dataset allows only limited AOSPRE runs. But there are a variety of runs you can do to further explore the data or familiarize yourself with AOSPRE configuration. E.g.: Try setting up flights north of the storm. Try setting up flights from west to east. See how results change with flights at different levels. Change the direction of the flight and the corresponding orientation of the beams in the scanning tables and still get sweeps within the slices of the WRF output data.","title":"Further exploration"}]}